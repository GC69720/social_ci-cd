---
name: Backend CI (Reusable)

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: "3.12"
      image-tag:
        required: true
        type: string
      push-image:
        required: false
        type: boolean
        default: false
      registry:
        required: false
        type: string
        default: ghcr.io/ORG
    secrets:
      REGISTRY_USERNAME:
        required: false
      REGISTRY_PASSWORD:
        required: false

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install linters
        run: |
          pipx install ruff
          pipx install black
      - name: Ruff
        run: ruff check backend
      - name: Black (check)
        run: black --check backend

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install deps
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install -U pip wheel
          python -m pip install -r backend/requirements.txt
      - name: Pytest
        run: |
          . .venv/bin/activate
          pytest -q

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Login registry (optional)
        if: ${{ inputs.push-image == true }}
        run: |
          echo "${{ secrets.REGISTRY_PASSWORD }}" | podman login "${{ inputs.registry }}" \
            -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin

      - name: Build image
        run: |
          podman build \
            -f backend/Containerfile \
            -t "${{ inputs.registry }}/reseau-api:${{ inputs.image-tag }}" \
            backend

      - name: Scan image (Trivy)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ inputs.registry }}/reseau-api:${{ inputs.image-tag }}
          format: table
          timeout: 10m

      - name: Push image
        if: ${{ inputs.push-image == true }}
        run: |
          podman push "${{ inputs.registry }}/reseau-api:${{ inputs.image-tag }}"
