---
version: "3.8"

services:
  # -------------------------------------------------------------
  # 🗄️ Base de données PostgreSQL
  # -------------------------------------------------------------
  db:
    image: docker.io/library/postgres:16
    restart: unless-stopped
    env_file:
      - ../env/stage/db.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-MyStrongPwd123!}
      POSTGRES_DB: ${POSTGRES_DB:-app}
    volumes:
      - db-data-stage:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  # -------------------------------------------------------------
  # ⚙️ Backend Django (API)
  # -------------------------------------------------------------
  api:
    image: ghcr.io/gc69720/reseau-api:${API_TAG:-dev}
    restart: unless-stopped
    env_file:
      - ../env/stage/api.env
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -lc '
        echo "[api] Waiting for DB (pg_isready)…";
        until pg_isready -h ${POSTGRES_HOST:-db} -p ${POSTGRES_PORT:-5432} -U ${POSTGRES_USER:-app}; do
          echo "⏳ DB not ready, retrying...";
          sleep 2;
        done;
        echo "[api] DB ready ✅";
        echo "[api] Apply migrations...";
        python manage.py migrate --noinput || exit 1;
        echo "[api] Starting Django server...";
        if command -v gunicorn >/dev/null 2>&1; then
          exec gunicorn social_applicatif.wsgi:application --bind 0.0.0.0:8000 --workers 3 --threads 4 --timeout 60;
        else
          exec python manage.py runserver 0.0.0.0:8000;
        fi
      '
    expose:
      - "8000"
    healthcheck:
      test:
        - "CMD-SHELL"
        - >-
          python - <<'PY'
          import sys, urllib.request
          try:
              with urllib.request.urlopen("http://127.0.0.1:8000/health", timeout=3) as resp:
                  sys.exit(0 if resp.status == 200 else 1)
          except Exception:
              sys.exit(1)
          PY
      interval: 30s
      timeout: 5s
      retries: 10

  # -------------------------------------------------------------
  # 💻 Frontend React
  # -------------------------------------------------------------
  web:
    image: ghcr.io/gc69720/reseau-web:${WEB_TAG:-dev}
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    expose:
      - "80"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost/ >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 10

  # -------------------------------------------------------------
  # 🌐 NGINX Reverse Proxy
  # -------------------------------------------------------------
  nginx:
    image: docker.io/library/nginx:1.27-alpine
    restart: unless-stopped
    depends_on:
      web:
        condition: service_healthy
      api:
        condition: service_started
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ../nginx/stage.conf:/etc/nginx/conf.d/default.conf:ro
      - ../nginx/snippets/security-headers.conf:/etc/nginx/snippets/security-headers.conf:ro
      - ../certs/stage:/etc/nginx/certs:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost/ >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 10

# -------------------------------------------------------------
# 🗃️ Volumes persistants
# -------------------------------------------------------------
volumes:
  db-data-stage:
    name: db-data-stage
