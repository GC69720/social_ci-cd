version: "3.9"

services:
  db:
    image: postgres:15
    container_name: social_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-socialdb}
      POSTGRES_USER: ${POSTGRES_USER:-social}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-socialpass}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-social} -d ${POSTGRES_DB:-socialdb}"]
      interval: 5s
      timeout: 3s
      retries: 20

  backend:
    # On suppose que le code backend est dans ce dépôt sous /backend
    build:
      context: ../../../social_applicatif/backend
      dockerfile: Dockerfile
    container_name: social_backend
    environment:
      # Django – adapte si tu n'utilises pas Django
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-change-me-dev}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-*}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-True}
      # Connexion DB
      POSTGRES_DB: ${POSTGRES_DB:-socialdb}
      POSTGRES_USER: ${POSTGRES_USER:-social}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-socialpass}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      DJANGO_DB_URL: ${DJANGO_DB_URL:-postgres://social:socialpass@db:5432/socialdb}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput || true &&
        python manage.py runserver 0.0.0.0:8000
      "

  nginx:
    image: nginx:alpine
    container_name: social_nginx
    depends_on:
      - backend
    ports:
      - "${HTTP_PORT:-8080}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro

volumes:
  db_data:
