name: oci-sbom-sign

on:
  workflow_call:
    inputs:
      image:
        description: "Image (ex: ghcr.io/org/app:tag)"
        type: string
        required: true
      generate_spdx:
        description: "Générer SBOM SPDX via Syft"
        type: boolean
        default: true
      sign_image:
        description: "Signer l'image avec Cosign (keyless OIDC)"
        type: boolean
        default: true
    secrets: {}

permissions:
  contents: read
  id-token: write     # requis pour cosign keyless (OIDC)
  packages: write     # ⬅️ nécessaire pour pousser la signature dans GHCR

jobs:
  sbom-sign:
    name: SBOM + Sign
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (meta only)
        uses: actions/checkout@v4

      # Auth GHCR pour Syft/Cosign pull/push
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # SBOM SPDX JSON via Syft (avec auth via env)
      - name: Generate SBOM (Syft)
        if: ${{ inputs.generate_spdx }}
        uses: anchore/syft-action@v0.17.0
        env:
          SYFT_REGISTRY_AUTH_USERNAME: ${{ github.actor }}
          SYFT_REGISTRY_AUTH_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        with:
          image: ${{ inputs.image }}
          format: spdx-json
          output: sbom.spdx.json

      - name: Upload SBOM (artifact)
        if: ${{ inputs.generate_spdx }}
        uses: actions/upload-artifact@v4
        with:
          name: sbom-spdx
          path: sbom.spdx.json
          retention-days: 7

      - name: Install Cosign
        if: ${{ inputs.sign_image }}
        uses: sigstore/cosign-installer@v3.7.0

      - name: Sign image (keyless OIDC)
        if: ${{ inputs.sign_image }}
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          # signature keyless; nécessite id-token: write + packages: write
          cosign sign --yes ${{ inputs.image }}

      - name: Verify signature
        if: ${{ inputs.sign_image }}
        run: |
          cosign verify ${{ inputs.image }} | head -n 50 || exit 1
